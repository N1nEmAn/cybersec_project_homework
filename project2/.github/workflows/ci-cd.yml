# 数字水印系统 CI/CD 配置

name: Digital Watermark System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: 代码风格检查
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 运行测试
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: 运行基础演示
      run: |
        python basic_demo.py
    
    - name: 性能测试
      run: |
        python benchmark.py
    
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    name: 安全检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装安全检查工具
      run: |
        pip install bandit safety
    
    - name: 运行Bandit安全检查
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: 检查依赖安全性
      run: |
        safety check -r requirements.txt --json --output safety-report.json
    
    - name: 上传安全报告
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: 构建
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装构建工具
      run: |
        pip install build wheel setuptools
    
    - name: 构建包
      run: |
        python -m build
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    name: 部署
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: 部署到测试环境
      run: |
        echo "部署到测试环境..."
        # 这里可以添加实际的部署脚本
    
    - name: 运行部署后测试
      run: |
        echo "运行部署后测试..."
        # 这里可以添加部署后的验证测试

  documentation:
    name: 文档构建
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装文档工具
      run: |
        pip install sphinx sphinx-rtd-theme
    
    - name: 构建文档
      run: |
        cd docs
        sphinx-build -b html . _build/html
    
    - name: 部署文档到GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  performance:
    name: 性能基准测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        pip install -r requirements.txt
        pip install memory-profiler
    
    - name: 运行性能测试
      run: |
        python -m memory_profiler benchmark.py
    
    - name: 生成性能报告
      run: |
        echo "生成性能基准报告..."
        # 可以添加更详细的性能分析

  compatibility:
    name: 兼容性测试
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 安装依赖 (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev
    
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 运行兼容性测试
      run: |
        python basic_demo.py
